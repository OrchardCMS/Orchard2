@model EditRemoteInstanceViewModel

<zone Name="Title"><h1>@RenderTitleSegments(T["Create Remote Instance"])</h1></zone>

<div asp-validation-summary="ModelOnly"></div>
<form asp-action="Create" method="post">
    <div class="form-group" asp-validation-class-for="Name">
        <label asp-for="Name">@T["Name"]</label>
        <input asp-for="Name" class="form-control" autofocus />
        <span asp-validation-for="Name" class="text-danger">@T["The name is required."]</span>
    </div>

    <div class="form-group" asp-validation-class-for="Url">
        <label asp-for="Url">@T["Url"]</label>
        <input asp-for="Url" class="form-control" />
        <span asp-validation-for="Url" class="text-danger">@T["The url is required."]</span>
    </div>

    <div class="form-group" asp-validation-class-for="ClientName">
        <label asp-for="ClientName">@T["Client Name"]</label>
        <input asp-for="ClientName" class="form-control" />
        <span asp-validation-for="ClientName" class="text-danger">@T["The client name is required."]</span>
    </div>

    <div class="form-group" asp-validation-class-for="ApiKey">
        <label asp-for="ApiKey">@T["Api Key"]</label>
        <input asp-for="ApiKey" type="password" class="form-control" />
        <span asp-validation-for="ApiKey" class="text-danger">@T["The api key is required."]</span>
    </div>

    <div class="form-group" asp-validation-class-for="ApiKeySecret">
        <div class="w-100 w-md-50">
            <label asp-for="ApiKeySecret">@T["Api Key Secret"]</label>
            @await Component.InvokeAsync("SelectSecret", new { secretType = "TextSecret", selectedSecret = Model.ApiKeySecret, htmlName = Html.NameFor(m => m.ApiKeySecret), required  = false})
        </div>
        <span class="hint">@T["The name of the secret for the api key. When provided will override the ApiKey value."]</span>
    </div> 

    <div class="form-group" asp-validation-class-for="RsaEncryptionSecret">
        <div class="w-100 w-md-50">
            <label asp-for="RsaEncryptionSecret">@T["Rsa encryption secret"]</label>
            @await Component.InvokeAsync("SelectSecret", new { secretType = "RsaSecret", selectedSecret = Model.RsaEncryptionSecret, htmlName = Html.NameFor(m => m.RsaEncryptionSecret), required = false })
            <span asp-validation-for="RsaEncryptionSecret"></span>
        </div>
        <span class="hint">@T["The name of the secret to use when a deployment step encrypts data for transmission to this remote instance."]</span>
        <span class="hint">@T["Note: The public key will be used for encryption, and the remote instance must have the private key."]</span>
    </div> 

    <div class="form-group" asp-validation-class-for="RsaSigningSecret">
        <div class="w-100 w-md-50">
            <label asp-for="RsaSigningSecret">@T["Rsa signing secret"]</label>
            @await Component.InvokeAsync("SelectSecret", new { secretType = "RsaSecret", selectedSecret = Model.RsaSigningSecret, htmlName = Html.NameFor(m => m.RsaSigningSecret), required = false })
            <span asp-validation-for="RsaSigningSecret"></span>
        </div>
        <span class="hint">@T["The name of the secret to use when a deployment step signs encrypted data for transmission to this remote instance."]</span>
        <span class="hint">@T["Note: The private key will be used for signing, and the remote instance must have the matching public key."]</span>
    </div> 

    <div class="form-group">
        <button class="btn btn-primary create" type="submit">@T["Create"]</button>
        <a class="btn btn-secondary cancel" role="button" asp-route-action="Index">@T["Cancel"]</a>
    </div>
   
</form>
