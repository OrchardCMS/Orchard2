@using Microsoft.Extensions.DependencyInjection
@using OrchardCore.ContentManagement
@using OrchardCore.Forms.Models
@using OrchardCore.Mvc.Utilities
@using OrchardCore.Workflows.Http.Services

@{
    @* The Forms module does not require the Workflows module so this service may not be available. *@
    var httpRequestEventSecretService = Context.RequestServices.GetService<IHttpRequestEventSecretService>();
    var formPart = ((ContentItem)Model.ContentItem).As<FormPart>();
    string encType = formPart.Method == "POST" ? formPart.EncType : string.Empty;
    var formContentTypeClassName = "form-" + ((string)Model.ContentItem.ContentType).HtmlClassify();

    var elementId =  ((ContentItem)Model.ContentItem).As<FormElementPart>()?.Id;
    string formId =  string.IsNullOrWhiteSpace(elementId) ?  $"form_{Model.ContentItem.ContentItemId}" : elementId;
    var action = formPart.Action;
    if (!String.IsNullOrEmpty(formPart.HttpRequestEventSecret) && httpRequestEventSecretService != null)
    {
        action = await httpRequestEventSecretService.GetUrlAsync(formPart.HttpRequestEventSecret);
    }
}
<form id="@formId" action="@action" method="@formPart.Method"  enctype="@encType" class="form-content @formContentTypeClassName">
    @if (formPart.EnableAntiForgeryToken)
    {
        @Html.AntiForgeryToken()
    }

    @await DisplayAsync(Model.Metadata.ChildContent)
</form>
